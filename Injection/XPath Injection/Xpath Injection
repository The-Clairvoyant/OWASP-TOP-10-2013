#DVWA Vuln App

#XPath injection is for XML files.


#http://www.tutorialspoint.com/xpath/

#http://www.w3schools.com/xsl/xpath_intro.asp

#https://www.owasp.org/index.php/XPATH_Injection

#http://tipstrickshack.blogspot.in/2013/11/xpath-injection-tutorial.html

#https://cwe.mitre.org/data/definitions/91.html

#https://www.owasp.org/index.php/Blind_XPath_Injection

#https://www.owasp.org/index.php/Testing_for_XPath_Injection_%28OTG-INPVAL-010%29







What is XPath?
XPath 	

    XPath is a syntax for defining parts of an XML document
    XPath uses path expressions to navigate in XML documents
    XPath contains a library of standard functions
    XPath is a major element in XSLT
    XPath is a W3C recommendation

XPath Path Expressions
XPath uses path expressions to select nodes or node-sets in an XML document. These path expressions look very much like the expressions you see when you work with a traditional computer file system.

XPath Standard Functions
XPath includes over 100 built-in functions. There are functions for string values, numeric values, date and time comparison, node and QName manipulation, sequence manipulation, Boolean values, and more.

XPath is Used in XSLT
XPath is a major element in the XSLT standard. Without XPath knowledge you will not be able to create XSLT documents.

XPath Terminology
Nodes

In XPath, there are seven kinds of nodes: element, attribute, text, namespace, processing-instruction, comment, and document nodes.

XML documents are treated as trees of nodes. The topmost element of the tree is called the root element.

Look at the following XML document:
<?xml version="1.0" encoding="UTF-8"?>

<bookstore>
  <book>
    <title lang="en">Harry Potter</title>
    <author>J K. Rowling</author>
    <year>2005</year>
    <price>29.99</price>
  </book>
</bookstore>

Example of nodes in the XML document above:
<bookstore> (root element node)

<author>J K. Rowling</author> (element node)

lang="en" (attribute node) 



XPath uses path expressions to select nodes or node-sets in an XML document. The node is selected by following a path or steps.
The XML Example Document

We will use the following XML document in the examples below.
<?xml version="1.0" encoding="UTF-8"?>

<bookstore>

<book>
  <title lang="en">Harry Potter</title>
  <price>29.99</price>
</book>

<book>
  <title lang="en">Learning XML</title>
  <price>39.95</price>
</book>

</bookstore>
Selecting Nodes

XPath uses path expressions to select nodes in an XML document. The node is selected by following a path or steps. The most useful path expressions are listed below:
Expression 	Description
nodename 	Selects all nodes with the name "nodename"
/ 	Selects from the root node
// 	Selects nodes in the document from the current node that match the selection no matter where they are
. 	Selects the current node
.. 	Selects the parent of the current node
@ 	Selects attributes

In the table below we have listed some path expressions and the result of the expressions:
Path Expression 	Result
bookstore 	Selects all nodes with the name "bookstore"
/bookstore 	Selects the root element bookstore

Note: If the path starts with a slash ( / ) it always represents an absolute path to an element!
bookstore/book 	Selects all book elements that are children of bookstore
//book 	Selects all book elements no matter where they are in the document
bookstore//book 	Selects all book elements that are descendant of the bookstore element, no matter where they are under the bookstore element
//@lang 	Selects all attributes that are named lang
Predicates

Predicates are used to find a specific node or a node that contains a specific value.

Predicates are always embedded in square brackets.

In the table below we have listed some path expressions with predicates and the result of the expressions:
Path Expression 	Result
/bookstore/book[1] 	Selects the first book element that is the child of the bookstore element.

Note: In IE 5,6,7,8,9 first node is[0], but according to W3C, it is [1]. To solve this problem in IE, set the SelectionLanguage to XPath:
In JavaScript: xml.setProperty("SelectionLanguage","XPath");
/bookstore/book[last()] 	Selects the last book element that is the child of the bookstore element
/bookstore/book[last()-1] 	Selects the last but one book element that is the child of the bookstore element
/bookstore/book[position()<3] 	Selects the first two book elements that are children of the bookstore element
//title[@lang] 	Selects all the title elements that have an attribute named lang
//title[@lang='en'] 	Selects all the title elements that have a "lang" attribute with a value of "en"
/bookstore/book[price>35.00] 	Selects all the book elements of the bookstore element that have a price element with a value greater than 35.00
/bookstore/book[price>35.00]/title 	Selects all the title elements of the book elements of the bookstore element that have a price element with a value greater than 35.00
Selecting Unknown Nodes

XPath wildcards can be used to select unknown XML nodes.
Wildcard 	Description
* 	Matches any element node
@* 	Matches any attribute node
node() 	Matches any node of any kind

In the table below we have listed some path expressions and the result of the expressions:
Path Expression 	Result
/bookstore/* 	Selects all the child element nodes of the bookstore element
//* 	Selects all elements in the document
//title[@*] 	Selects all title elements which have at least one attribute of any kind
Selecting Several Paths

By using the | operator in an XPath expression you can select several paths.

In the table below we have listed some path expressions and the result of the expressions:
Path Expression 	Result
//book/title | //book/price 	Selects all the title AND price elements of all book elements
//title | //price 	Selects all the title AND price elements in the document
/bookstore/book/title | //price 	Selects all the title elements of the book element of the bookstore element AND all the price elements in the document




